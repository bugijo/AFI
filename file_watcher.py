"""
üîç AFI v4.0 - File System Watcher
Sistema de monitoramento autom√°tico de arquivos usando watchdog

Este m√≥dulo implementa o "Guardi√£o" que monitora pastas 24/7 e 
automaticamente atualiza a base de conhecimento quando detecta
arquivos novos ou modificados.
"""

import os
import time
import threading
from pathlib import Path
from typing import Optional, Callable, List
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileModifiedEvent, FileCreatedEvent

class AFIFileWatcher(FileSystemEventHandler):
    """
    üîç Guardi√£o de Arquivos do AFI
    Monitora mudan√ßas no sistema de arquivos e dispara reindexa√ß√£o autom√°tica
    """
    
    def __init__(self, callback_function: Callable[[str], None], 
                 extensoes_validas: Optional[List[str]] = None):
        """
        Inicializa o File Watcher
        
        Args:
            callback_function: Fun√ß√£o a ser chamada quando um arquivo v√°lido for detectado
            extensoes_validas: Lista de extens√µes de arquivo para monitorar
        """
        super().__init__()
        self.callback_function = callback_function
        self.extensoes_validas = extensoes_validas or [
            '.txt', '.pdf', '.docx', '.doc', '.md', '.rtf', '.odt'
        ]
        self.extensoes_ignoradas = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv']
        
        # Controle de debounce para evitar m√∫ltiplas chamadas
        self.last_event_time = {}
        self.debounce_seconds = 2  # Aguardar 2 segundos antes de processar
        
        print("üîç AFI File Watcher inicializado!")
        print(f"üìÑ Extens√µes monitoradas: {', '.join(self.extensoes_validas)}")
    
    def _is_valid_file(self, file_path: str) -> bool:
        """Verifica se o arquivo √© v√°lido para indexa√ß√£o"""
        if not os.path.isfile(file_path):
            return False
            
        # Verificar extens√£o
        extensao = Path(file_path).suffix.lower()
        
        # Ignorar arquivos de v√≠deo
        if extensao in self.extensoes_ignoradas:
            return False
            
        # Aceitar apenas extens√µes v√°lidas
        if extensao not in self.extensoes_validas:
            return False
            
        # Ignorar arquivos tempor√°rios
        nome_arquivo = Path(file_path).name
        if nome_arquivo.startswith('.') or nome_arquivo.startswith('~'):
            return False
            
        return True
    
    def _should_process_event(self, file_path: str) -> bool:
        """Implementa debounce para evitar processamento excessivo"""
        current_time = time.time()
        
        # Verificar se j√° processamos este arquivo recentemente
        if file_path in self.last_event_time:
            time_diff = current_time - self.last_event_time[file_path]
            if time_diff < self.debounce_seconds:
                return False
        
        # Atualizar timestamp
        self.last_event_time[file_path] = current_time
        return True
    
    def on_created(self, event):
        """Chamado quando um arquivo √© criado"""
        if isinstance(event, FileCreatedEvent):
            self._handle_file_event(event.src_path, "CRIADO")
    
    def on_modified(self, event):
        """Chamado quando um arquivo √© modificado"""
        if isinstance(event, FileModifiedEvent):
            self._handle_file_event(event.src_path, "MODIFICADO")
    
    def _handle_file_event(self, file_path: str, event_type: str):
        """Processa eventos de arquivo"""
        try:
            # Verificar se √© um arquivo v√°lido
            if not self._is_valid_file(file_path):
                return
            
            # Aplicar debounce
            if not self._should_process_event(file_path):
                return
            
            print(f"üîç Arquivo {event_type}: {Path(file_path).name}")
            
            # Chamar fun√ß√£o de callback para reindexa√ß√£o
            if self.callback_function:
                # Executar em thread separada para n√£o bloquear o watcher
                thread = threading.Thread(
                    target=self._safe_callback,
                    args=(file_path, event_type),
                    daemon=True
                )
                thread.start()
                
        except Exception as e:
            print(f"‚ùå Erro ao processar evento de arquivo: {str(e)}")
    
    def _safe_callback(self, file_path: str, event_type: str):
        """Executa callback de forma segura"""
        try:
            # Obter diret√≥rio pai para reindexa√ß√£o
            diretorio_pai = str(Path(file_path).parent)
            print(f"üîÑ Iniciando reindexa√ß√£o autom√°tica de: {diretorio_pai}")
            
            # Chamar fun√ß√£o de callback
            self.callback_function(diretorio_pai)
            
            print(f"‚úÖ Reindexa√ß√£o autom√°tica conclu√≠da para: {Path(file_path).name}")
            
        except Exception as e:
            print(f"‚ùå Erro durante reindexa√ß√£o autom√°tica: {str(e)}")


class AFIWatcherService:
    """
    üõ°Ô∏è Servi√ßo de Monitoramento do AFI
    Gerencia m√∫ltiplos watchers e fornece interface de controle
    """
    
    def __init__(self):
        self.observers = {}  # Dicion√°rio de observers por pasta
        self.is_running = False
        self.callback_function = None
        
    def set_callback(self, callback_function: Callable[[str], None]):
        """Define a fun√ß√£o de callback para reindexa√ß√£o"""
        self.callback_function = callback_function
        print("üîó Callback de reindexa√ß√£o configurado!")
    
    def add_watch_folder(self, folder_path: str) -> bool:
        """
        Adiciona uma pasta para monitoramento
        
        Args:
            folder_path: Caminho da pasta a ser monitorada
            
        Returns:
            bool: True se adicionado com sucesso
        """
        try:
            if not os.path.exists(folder_path):
                print(f"‚ùå Pasta n√£o encontrada: {folder_path}")
                return False
            
            if folder_path in self.observers:
                print(f"‚ö†Ô∏è Pasta j√° est√° sendo monitorada: {folder_path}")
                return True
            
            # Criar event handler
            event_handler = AFIFileWatcher(self.callback_function)
            
            # Criar observer
            observer = Observer()
            observer.schedule(event_handler, folder_path, recursive=True)
            
            # Armazenar observer
            self.observers[folder_path] = observer
            
            # Iniciar se o servi√ßo estiver rodando
            if self.is_running:
                observer.start()
                print(f"üîç Monitoramento iniciado para: {folder_path}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao adicionar pasta para monitoramento: {str(e)}")
            return False
    
    def remove_watch_folder(self, folder_path: str) -> bool:
        """Remove uma pasta do monitoramento"""
        try:
            if folder_path not in self.observers:
                print(f"‚ö†Ô∏è Pasta n√£o est√° sendo monitorada: {folder_path}")
                return False
            
            # Parar observer
            observer = self.observers[folder_path]
            observer.stop()
            observer.join()
            
            # Remover do dicion√°rio
            del self.observers[folder_path]
            
            print(f"üõë Monitoramento removido para: {folder_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao remover pasta do monitoramento: {str(e)}")
            return False
    
    def start_service(self):
        """Inicia o servi√ßo de monitoramento"""
        try:
            if self.is_running:
                print("‚ö†Ô∏è Servi√ßo j√° est√° rodando!")
                return
            
            # Iniciar todos os observers
            for folder_path, observer in self.observers.items():
                observer.start()
                print(f"üîç Monitoramento iniciado para: {folder_path}")
            
            self.is_running = True
            print("üõ°Ô∏è Servi√ßo de monitoramento AFI iniciado!")
            
        except Exception as e:
            print(f"‚ùå Erro ao iniciar servi√ßo: {str(e)}")
    
    def stop_service(self):
        """Para o servi√ßo de monitoramento"""
        try:
            if not self.is_running:
                print("‚ö†Ô∏è Servi√ßo n√£o est√° rodando!")
                return
            
            # Parar todos os observers
            for folder_path, observer in self.observers.items():
                observer.stop()
                print(f"üõë Monitoramento parado para: {folder_path}")
            
            # Aguardar finaliza√ß√£o
            for observer in self.observers.values():
                observer.join()
            
            self.is_running = False
            print("üõ°Ô∏è Servi√ßo de monitoramento AFI parado!")
            
        except Exception as e:
            print(f"‚ùå Erro ao parar servi√ßo: {str(e)}")
    
    def get_status(self) -> dict:
        """Retorna status do servi√ßo"""
        return {
            'is_running': self.is_running,
            'watched_folders': list(self.observers.keys()),
            'total_watchers': len(self.observers)
        }


# Inst√¢ncia global do servi√ßo (Singleton)
afi_watcher_service = AFIWatcherService()


def inicializar_watcher_service(callback_function: Callable[[str], None]):
    """
    üöÄ Fun√ß√£o de inicializa√ß√£o do servi√ßo de monitoramento
    
    Args:
        callback_function: Fun√ß√£o que ser√° chamada para reindexar quando arquivos mudarem
    """
    global afi_watcher_service
    
    try:
        # Configurar callback
        afi_watcher_service.set_callback(callback_function)
        
        print("üõ°Ô∏è Servi√ßo de File Watcher do AFI v4.0 inicializado!")
        print("üí° Use afi_watcher_service.add_watch_folder() para adicionar pastas")
        print("üí° Use afi_watcher_service.start_service() para iniciar o monitoramento")
        
        return afi_watcher_service
        
    except Exception as e:
        print(f"‚ùå Erro ao inicializar servi√ßo de watcher: {str(e)}")
        return None


if __name__ == "__main__":
    # Teste do sistema
    def callback_teste(folder_path):
        print(f"üîÑ CALLBACK TESTE: Reindexar {folder_path}")
    
    # Inicializar servi√ßo
    service = inicializar_watcher_service(callback_teste)
    
    if service:
        # Adicionar pasta de teste
        service.add_watch_folder("./memoria")
        
        # Iniciar servi√ßo
        service.start_service()
        
        try:
            print("üîç Monitoramento ativo. Pressione Ctrl+C para parar...")
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë Parando servi√ßo...")
            service.stop_service()