#!/usr/bin/env python3
"""
ü§ñ AFI v4.0 - Agente de M√≠dia Social Completo
Sistema Automatizado de Cria√ß√£o de Conte√∫do para Redes Sociais

Este √© o script principal que integra todos os componentes:
- üëÅÔ∏è Guardi√£o (Monitoramento de pastas)
- üß† C√©rebro Criativo (An√°lise AFI)
- üé¨ Oficina de Edi√ß√£o (MoviePy)
- üìÖ Fila de Sa√≠da (Agendamento)
"""

import os
import sys
import time
import logging
import argparse
from pathlib import Path
from datetime import datetime

# Importar m√≥dulos do sistema
try:
    from guardiao_midia import GuardiaoMidia, GuardiaoMidiaHandler
    from editor_video import editar_video_story, criar_pastas_necessarias
    from integracao_afi_midia import IntegradorAFIMidia
except ImportError as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {e}")
    print("üí° Certifique-se de que todos os arquivos est√£o no mesmo diret√≥rio")
    sys.exit(1)

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('agente_midia_social.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AgenteMidiaSocial:
    """
    Classe principal do Agente de M√≠dia Social.
    Coordena todos os componentes do sistema.
    """
    
    def __init__(self):
        """
        Inicializa o Agente de M√≠dia Social.
        """
        self.integrador_afi = IntegradorAFIMidia()
        self.guardiao = None
        self.estatisticas = {
            'videos_processados': 0,
            'videos_com_sucesso': 0,
            'videos_com_erro': 0,
            'inicio_execucao': datetime.now()
        }
        
    def inicializar_sistema(self):
        """
        Inicializa todo o sistema e cria estrutura necess√°ria.
        """
        logger.info("üöÄ Inicializando Agente de M√≠dia Social...")
        
        # Criar pastas necess√°rias
        logger.info("üìÅ Criando estrutura de pastas...")
        criar_pastas_necessarias()
        
        # Verificar depend√™ncias
        self._verificar_dependencias()
        
        # Inicializar guardi√£o com integra√ß√£o AFI
        self._inicializar_guardiao_inteligente()
        
        logger.info("‚úÖ Sistema inicializado com sucesso!")
        
    def _verificar_dependencias(self):
        """
        Verifica se todas as depend√™ncias est√£o instaladas.
        """
        dependencias = ['moviepy', 'watchdog']
        
        for dep in dependencias:
            try:
                __import__(dep)
                logger.info(f"‚úÖ {dep} dispon√≠vel")
            except ImportError:
                logger.error(f"‚ùå {dep} n√£o encontrado")
                raise ImportError(f"Instale {dep}: pip install {dep}")
    
    def _inicializar_guardiao_inteligente(self):
        """
        Inicializa o guardi√£o com integra√ß√£o AFI.
        """
        # Criar handler personalizado com AFI
        handler_inteligente = GuardiaoMidiaHandlerInteligente(
            afi_integration=self.integrador_afi,
            estatisticas=self.estatisticas
        )
        
        # Criar guardi√£o
        self.guardiao = GuardiaoMidia()
        self.guardiao.handler = handler_inteligente
        
    def executar_modo_monitoramento(self):
        """
        Executa o sistema em modo de monitoramento cont√≠nuo.
        """
        logger.info("üëÅÔ∏è Iniciando modo de monitoramento...")
        self._exibir_status_inicial()
        
        try:
            self.guardiao.iniciar()
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Parando sistema...")
            self._exibir_estatisticas_finais()
    
    def processar_video_unico(self, caminho_video, caminho_musica=None, texto_personalizado=None):
        """
        Processa um √∫nico v√≠deo sem monitoramento.
        
        Args:
            caminho_video (str): Caminho para o v√≠deo
            caminho_musica (str): Caminho para m√∫sica (opcional)
            texto_personalizado (str): Texto personalizado (opcional)
        """
        logger.info(f"üé¨ Processando v√≠deo √∫nico: {caminho_video}")
        
        try:
            video_path = Path(caminho_video)
            if not video_path.exists():
                raise FileNotFoundError(f"V√≠deo n√£o encontrado: {caminho_video}")
            
            # Analisar com AFI se n√£o houver texto personalizado
            if not texto_personalizado:
                frase, estilo = self.integrador_afi.analisar_video_com_afi(caminho_video)
            else:
                frase = texto_personalizado
                estilo = "Instrumental"  # Padr√£o
            
            # Selecionar m√∫sica se n√£o especificada
            if not caminho_musica:
                caminho_musica = self._selecionar_musica_automatica(estilo)
            
            # Gerar nome de sa√≠da
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
            nome_saida = f"{timestamp}_processado_{video_path.stem}.mp4"
            caminho_saida = Path("C:/AFI/Videos_Agendados") / nome_saida
            
            # Processar v√≠deo
            sucesso = editar_video_story(
                caminho_video_original=caminho_video,
                caminho_musica=caminho_musica,
                texto_overlay=frase,
                caminho_saida=str(caminho_saida)
            )
            
            if sucesso:
                logger.info(f"‚úÖ V√≠deo processado: {caminho_saida}")
                return str(caminho_saida)
            else:
                logger.error("‚ùå Erro no processamento")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar v√≠deo: {e}")
            return None
    
    def _selecionar_musica_automatica(self, estilo):
        """
        Seleciona uma m√∫sica automaticamente baseada no estilo.
        """
        pasta_musicas = Path(f"C:/AFI/Musicas/{estilo}")
        
        if pasta_musicas.exists():
            musicas = list(pasta_musicas.glob("*.mp3"))
            if musicas:
                return str(musicas[0])  # Primeira m√∫sica encontrada
        
        # Fallback: procurar em qualquer pasta
        for pasta in Path("C:/AFI/Musicas").iterdir():
            if pasta.is_dir():
                musicas = list(pasta.glob("*.mp3"))
                if musicas:
                    return str(musicas[0])
        
        return None
    
    def _exibir_status_inicial(self):
        """
        Exibe status inicial do sistema.
        """
        print("\n" + "="*60)
        print("ü§ñ AFI v4.0 - AGENTE DE M√çDIA SOCIAL")
        print("="*60)
        print(f"üìÅ Pasta monitorada: C:/AFI/Videos_Para_Editar")
        print(f"üéµ Pastas de m√∫sica: C:/AFI/Musicas/[Rock|Pop|Calma|Eletronica|Instrumental]")
        print(f"üì§ Sa√≠da: C:/AFI/Videos_Agendados")
        print(f"üïê Iniciado em: {self.estatisticas['inicio_execucao'].strftime('%Y-%m-%d %H:%M:%S')}")
        print("\nüìù COMO USAR:")
        print("1. Adicione m√∫sicas nas pastas de estilo")
        print("2. Copie v√≠deos para a pasta monitorada")
        print("3. O sistema processar√° automaticamente!")
        print("\n‚èπÔ∏è Pressione Ctrl+C para parar")
        print("="*60)
    
    def _exibir_estatisticas_finais(self):
        """
        Exibe estat√≠sticas finais do sistema.
        """
        tempo_execucao = datetime.now() - self.estatisticas['inicio_execucao']
        
        print("\n" + "="*50)
        print("üìä ESTAT√çSTICAS FINAIS")
        print("="*50)
        print(f"‚è±Ô∏è Tempo de execu√ß√£o: {tempo_execucao}")
        print(f"üé¨ V√≠deos processados: {self.estatisticas['videos_processados']}")
        print(f"‚úÖ Sucessos: {self.estatisticas['videos_com_sucesso']}")
        print(f"‚ùå Erros: {self.estatisticas['videos_com_erro']}")
        
        if self.estatisticas['videos_processados'] > 0:
            taxa_sucesso = (self.estatisticas['videos_com_sucesso'] / self.estatisticas['videos_processados']) * 100
            print(f"üìà Taxa de sucesso: {taxa_sucesso:.1f}%")
        
        print("="*50)

class GuardiaoMidiaHandlerInteligente(GuardiaoMidiaHandler):
    """
    Handler inteligente que integra com AFI e estat√≠sticas.
    """
    
    def __init__(self, afi_integration=None, estatisticas=None):
        super().__init__(afi_integration)
        self.afi_integration = afi_integration
        self.estatisticas = estatisticas or {}
    
    def consultar_afi(self, caminho_video):
        """
        Usa a integra√ß√£o AFI real em vez da simula√ß√£o.
        """
        if self.afi_integration:
            return self.afi_integration.analisar_video_com_afi(str(caminho_video))
        else:
            return super().consultar_afi(caminho_video)
    
    def processar_novo_video(self, caminho_video):
        """
        Processa novo v√≠deo com estat√≠sticas.
        """
        self.estatisticas['videos_processados'] = self.estatisticas.get('videos_processados', 0) + 1
        
        try:
            super().processar_novo_video(caminho_video)
            self.estatisticas['videos_com_sucesso'] = self.estatisticas.get('videos_com_sucesso', 0) + 1
        except Exception as e:
            self.estatisticas['videos_com_erro'] = self.estatisticas.get('videos_com_erro', 0) + 1
            raise e

def main():
    """
    Fun√ß√£o principal com interface de linha de comando.
    """
    parser = argparse.ArgumentParser(
        description="ü§ñ AFI v4.0 - Agente de M√≠dia Social",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:

  # Modo monitoramento (padr√£o)
  python agente_midia_social.py

  # Processar v√≠deo √∫nico
  python agente_midia_social.py --video "meu_video.mp4"

  # Processar com m√∫sica espec√≠fica
  python agente_midia_social.py --video "video.mp4" --musica "musica.mp3"

  # Processar com texto personalizado
  python agente_midia_social.py --video "video.mp4" --texto "üöÄ Minha frase!"

  # Apenas configurar sistema
  python agente_midia_social.py --setup
        """
    )
    
    parser.add_argument('--video', help='Processar v√≠deo √∫nico')
    parser.add_argument('--musica', help='M√∫sica espec√≠fica para usar')
    parser.add_argument('--texto', help='Texto personalizado para overlay')
    parser.add_argument('--setup', action='store_true', help='Apenas configurar sistema')
    
    args = parser.parse_args()
    
    # Criar agente
    agente = AgenteMidiaSocial()
    agente.inicializar_sistema()
    
    if args.setup:
        print("‚úÖ Sistema configurado com sucesso!")
        print("üìÅ Pastas criadas em C:/AFI/")
        print("üí° Adicione m√∫sicas e v√≠deos para come√ßar!")
        return
    
    if args.video:
        # Modo processamento √∫nico
        resultado = agente.processar_video_unico(
            caminho_video=args.video,
            caminho_musica=args.musica,
            texto_personalizado=args.texto
        )
        
        if resultado:
            print(f"‚úÖ V√≠deo processado: {resultado}")
        else:
            print("‚ùå Erro no processamento")
    else:
        # Modo monitoramento
        agente.executar_modo_monitoramento()

if __name__ == '__main__':
    main()