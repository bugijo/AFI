#!/usr/bin/env python3
"""
üß† AFI v4.0 - Integra√ß√£o com M√≠dia Social
Conecta o Guardi√£o de M√≠dia com o sistema AFI para an√°lise inteligente

Este m√≥dulo integra o sistema de monitoramento de v√≠deos com o AFI,
permitindo an√°lise inteligente de conte√∫do e gera√ß√£o de frases de impacto.
"""

import os
import sys
import logging
from pathlib import Path

# Adicionar o diret√≥rio atual ao path para importar m√≥dulos locais
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from core_logic import AFICore
    from config import Config
except ImportError as e:
    logging.warning(f"M√≥dulos AFI n√£o encontrados: {e}")
    AFICore = None
    Config = None

logger = logging.getLogger(__name__)

class IntegradorAFIMidia:
    """
    Classe que integra o AFI com o sistema de m√≠dia social.
    """
    
    def __init__(self):
        """
        Inicializa o integrador AFI-M√≠dia.
        """
        self.afi_core = None
        self.config = None
        self.inicializar_afi()
        
    def inicializar_afi(self):
        """
        Inicializa a conex√£o com o AFI.
        """
        try:
            if Config and AFICore:
                self.config = Config()
                self.afi_core = AFICore()
                logger.info("‚úÖ AFI Core inicializado com sucesso")
            else:
                logger.warning("‚ö†Ô∏è AFI Core n√£o dispon√≠vel - usando modo simulado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar AFI: {e}")
            
    def analisar_video_com_afi(self, caminho_video):
        """
        Analisa um v√≠deo usando o AFI e gera frase de impacto + estilo musical.
        
        Args:
            caminho_video (str): Caminho para o arquivo de v√≠deo
            
        Returns:
            tuple: (frase_impacto, estilo_musica)
        """
        try:
            nome_arquivo = Path(caminho_video).stem
            
            if self.afi_core:
                # Usar AFI real para an√°lise
                return self._analisar_com_afi_real(caminho_video, nome_arquivo)
            else:
                # Usar an√°lise simulada
                return self._analisar_simulado(nome_arquivo)
                
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise do v√≠deo: {e}")
            return self._analisar_simulado(Path(caminho_video).stem)
    
    def _analisar_com_afi_real(self, caminho_video, nome_arquivo):
        """
        An√°lise usando o AFI real.
        """
        try:
            # Prompt para o AFI analisar o v√≠deo
            prompt_analise = f"""
            Analise este arquivo de v√≠deo: {nome_arquivo}
            
            Com base no nome do arquivo e no contexto da FINITI (empresa de equipamentos airless),
            gere:
            1. Uma frase de impacto curta (m√°ximo 30 caracteres) para story de rede social
            2. Um estilo musical adequado: Rock, Pop, Calma, Eletronica ou Instrumental
            
            Responda no formato:
            FRASE: [sua frase aqui]
            ESTILO: [estilo musical]
            """
            
            # Consultar AFI
            resposta = self.afi_core.processar_consulta(prompt_analise)
            
            # Extrair frase e estilo da resposta
            frase, estilo = self._extrair_frase_estilo(resposta)
            
            logger.info(f"üß† AFI analisou: Frase='{frase}', Estilo='{estilo}'")
            return frase, estilo
            
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise AFI real: {e}")
            return self._analisar_simulado(nome_arquivo)
    
    def _extrair_frase_estilo(self, resposta_afi):
        """
        Extrai frase e estilo da resposta do AFI.
        """
        try:
            linhas = resposta_afi.split('\n')
            frase = "üöÄ Inova√ß√£o FINITI"
            estilo = "Instrumental"
            
            for linha in linhas:
                if 'FRASE:' in linha.upper():
                    frase = linha.split(':', 1)[1].strip()
                elif 'ESTILO:' in linha.upper():
                    estilo = linha.split(':', 1)[1].strip()
            
            # Validar estilo
            estilos_validos = ['Rock', 'Pop', 'Calma', 'Eletronica', 'Instrumental']
            if estilo not in estilos_validos:
                estilo = 'Instrumental'
            
            return frase, estilo
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair frase/estilo: {e}")
            return "üöÄ Inova√ß√£o FINITI", "Instrumental"
    
    def _analisar_simulado(self, nome_arquivo):
        """
        An√°lise simulada baseada em palavras-chave.
        """
        nome_lower = nome_arquivo.lower()
        
        # Mapeamento de palavras-chave para frases e estilos
        mapeamentos = {
            'airless': ("üîß Tecnologia Airless", "Instrumental"),
            'manual': ("üìñ Guia Completo", "Calma"),
            'tecnico': ("‚öôÔ∏è Precis√£o T√©cnica", "Instrumental"),
            'vendas': ("üí∞ Oportunidade √önica", "Pop"),
            'promocao': ("üéÅ Oferta Especial", "Pop"),
            'treino': ("üí™ Capacita√ß√£o Pro", "Rock"),
            'energia': ("‚ö° For√ßa Total", "Rock"),
            'qualidade': ("üèÜ Excel√™ncia FINITI", "Instrumental"),
            'inovacao': ("üöÄ Futuro Agora", "Eletronica"),
            'produto': ("‚ú® Solu√ß√£o Ideal", "Pop")
        }
        
        # Buscar correspond√™ncia
        for palavra, (frase, estilo) in mapeamentos.items():
            if palavra in nome_lower:
                logger.info(f"üéØ An√°lise simulada: '{palavra}' ‚Üí Frase='{frase}', Estilo='{estilo}'")
                return frase, estilo
        
        # Padr√£o se nenhuma palavra-chave for encontrada
        frase_padrao = "üöÄ FINITI Inova√ß√£o"
        estilo_padrao = "Instrumental"
        
        logger.info(f"üìù Usando padr√£o: Frase='{frase_padrao}', Estilo='{estilo_padrao}'")
        return frase_padrao, estilo_padrao
    
    def gerar_prompt_criativo(self, nome_arquivo, contexto=""):
        """
        Gera um prompt criativo para an√°lise mais detalhada.
        """
        prompt = f"""
        üé¨ AN√ÅLISE CRIATIVA DE V√çDEO - AFI v4.0
        
        Arquivo: {nome_arquivo}
        Contexto: {contexto}
        
        Como especialista em marketing digital da FINITI, analise este v√≠deo e crie:
        
        1. FRASE DE IMPACTO (m√°ximo 25 caracteres):
           - Deve ser cativante para stories
           - Incluir emoji relevante
           - Focar no benef√≠cio principal
        
        2. ESTILO MUSICAL:
           - Rock: Para energia e motiva√ß√£o
           - Pop: Para vendas e promo√ß√µes
           - Calma: Para tutoriais e explica√ß√µes
           - Eletronica: Para inova√ß√£o e tecnologia
           - Instrumental: Para conte√∫do t√©cnico
        
        3. JUSTIFICATIVA:
           - Por que essa combina√ß√£o funciona?
        
        Responda no formato:
        FRASE: [sua frase]
        ESTILO: [estilo escolhido]
        JUSTIFICATIVA: [explica√ß√£o]
        """
        
        return prompt

def testar_integracao():
    """
    Testa a integra√ß√£o AFI-M√≠dia.
    """
    print("üß† Testando Integra√ß√£o AFI-M√≠dia")
    print("=" * 40)
    
    integrador = IntegradorAFIMidia()
    
    # Testes com diferentes tipos de arquivo
    testes = [
        "manual_airless_1095.mp4",
        "promocao_outubro_rosa.mp4", 
        "treino_vendas_finiti.mp4",
        "tutorial_tecnico_equipamento.mp4",
        "inovacao_produto_2025.mp4"
    ]
    
    for arquivo_teste in testes:
        print(f"\nüìπ Analisando: {arquivo_teste}")
        frase, estilo = integrador.analisar_video_com_afi(arquivo_teste)
        print(f"   üìù Frase: {frase}")
        print(f"   üéµ Estilo: {estilo}")

if __name__ == '__main__':
    testar_integracao()