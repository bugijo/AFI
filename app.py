import streamlit as st
import time
import os
from pathlib import Path
from config import SERVER_CONFIG, get_server_port, get_server_url
from core_logic import verificar_conexao_ollama, carregar_memoria, processar_prompt_geral
from streamlit_chat import message
from streamlit_option_menu import option_menu
from llama_index.core import Settings, VectorStoreIndex, SimpleDirectoryReader
from llama_index.llms.ollama import Ollama
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.core.memory import ChatMemoryBuffer

# üîç NOVA IMPORTA√á√ÉO: File System Watcher
try:
    from file_watcher import afi_watcher_service, inicializar_watcher_service
    WATCHER_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Watchdog n√£o dispon√≠vel. Instale com: pip install watchdog")
    WATCHER_AVAILABLE = False

# =================================================================================
# CONTROLE DE ESTADO DE INICIALIZA√á√ÉO - SISTEMA ROBUSTO
# =================================================================================
if "system_ready" not in st.session_state:
    st.session_state.system_ready = False
# Removido: inicializa√ß√£o manual do query_engine agora √© feita via @st.cache_resource
if "chat_engine" not in st.session_state:
    st.session_state.chat_engine = None
# üîç NOVO: Estado do File Watcher
if "watcher_initialized" not in st.session_state:
    st.session_state.watcher_initialized = False

@st.cache_resource
def setup_sistema_ia():
    """Configura√ß√£o inicial do sistema de IA"""
    try:
        # Configurar embedding
        embed_model = HuggingFaceEmbedding(model_name="sentence-transformers/all-MiniLM-L6-v2")
        Settings.embed_model = embed_model
        
        # Configurar LLM padr√£o
        llm = Ollama(model="llava-llama3", request_timeout=120.0)
        Settings.llm = llm
        
        return True
    except Exception as e:
        st.code(f"Erro na configura√ß√£o do sistema: {str(e)}")
        return False

def inicializar_rag(pasta_memoria="memoria"):
    """Inicializa o motor RAG uma √∫nica vez - Padr√£o Singleton"""
    import traceback
    
    try:
        print("DEBUG: Inicializando o motor RAG...")
        
        # Primeiro, processar arquivos de m√≠dia (v√≠deos, imagens)
        print("DEBUG: Processando arquivos de m√≠dia...")
        carregar_memoria(pasta_memoria)
        
        # Verificar se a pasta existe e tem arquivos
        if not os.path.exists(pasta_memoria):
            print(f"DEBUG: Pasta n√£o encontrada: {pasta_memoria}")
            return None, None
            
        print(f"DEBUG: Pasta encontrada: {pasta_memoria}")
        
        # Carregar documentos da pasta (excluindo v√≠deos se pydub n√£o funcionar)
        print("DEBUG: Carregando documentos...")
        
        # Filtrar arquivos para evitar problemas com v√≠deos
        import glob
        arquivos_validos = []
        extensoes_video = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv']
        
        for arquivo in glob.glob(os.path.join(pasta_memoria, "*")):
            if os.path.isfile(arquivo):
                extensao = os.path.splitext(arquivo)[1].lower()
                if extensao in extensoes_video:
                    print(f"DEBUG: Pulando arquivo de v√≠deo: {os.path.basename(arquivo)}")
                    continue
                arquivos_validos.append(arquivo)
        
        print(f"DEBUG: {len(arquivos_validos)} arquivos v√°lidos encontrados")
        
        if not arquivos_validos:
            print("DEBUG: Nenhum arquivo v√°lido encontrado (apenas v√≠deos)")
            return None, None
        
        # Carregar apenas arquivos v√°lidos
        documents = SimpleDirectoryReader(input_files=arquivos_validos).load_data()
        
        if not documents:
            print(f"DEBUG: Nenhum documento carregado da pasta: {pasta_memoria}")
            return None, None
            
        print(f"DEBUG: {len(documents)} documentos carregados com sucesso!")
        
        # Criar √≠ndice
        print("DEBUG: Criando √≠ndice vetorial...")
        index = VectorStoreIndex.from_documents(documents)
        
        # Criar query engine
        print("DEBUG: Criando query engine...")
        query_engine = index.as_query_engine()
        
        # üß† NOVA FUNCIONALIDADE: Criar ChatEngine com mem√≥ria conversacional
        print("DEBUG: Criando ChatEngine com mem√≥ria conversacional...")
        memory = ChatMemoryBuffer.from_defaults(token_limit=3000)
        chat_engine = index.as_chat_engine(
            chat_mode="context",
            memory=memory,
            system_prompt=(
                "Voc√™ √© o AFI (Assistente Finiti Inteligente), um assistente especializado em engenharia, "
                "constru√ß√£o e equipamentos da empresa Finiti. Voc√™ tem acesso √† base de conhecimento da empresa "
                "e pode manter conversas contextuais. Sempre se lembre do contexto anterior da conversa. "
                "Quando o usu√°rio se referir a 'isso', 'aquilo', ou usar pronomes, considere o contexto da conversa anterior."
            )
        )
        
        print("DEBUG: Motor RAG e ChatEngine inicializados com sucesso!")
        return query_engine, chat_engine
        
    except Exception as e:
        # DIAGN√ìSTICO DETALHADO - CAPTURANDO O ERRO COMPLETO
        print("=" * 60)
        print("--- ERRO DETALHADO AO INICIALIZAR O RAG ---")
        print(f"Tipo do erro: {type(e).__name__}")
        print(f"Mensagem: {str(e)}")
        print("Traceback completo:")
        traceback.print_exc()
        print("=" * 60)
        return None, None

def criar_query_engine(pasta_memoria="memoria"):
    """Fun√ß√£o mantida para compatibilidade - usa inicializar_rag()"""
    query_engine, chat_engine = inicializar_rag(pasta_memoria)
    return query_engine

def verificar_status_sistema():
    """Verifica o status de todos os componentes do sistema"""
    status = {
        'ollama': verificar_conexao_ollama(),
        'rag': query_engine is not None,
        'chat_engine': st.session_state.chat_engine is not None,
        'models_count': 1 if verificar_conexao_ollama() else 0
    }
    return status

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="AFI v3.0 - Assistente Finiti Inteligente",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
css = """
<style>
/* Estilo para o elemento fixo no rodap√© */
.fixed-bottom-center {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #262730;
    color: white;
    padding: 12px 24px;
    border-radius: 12px;
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);
    z-index: 1000;
    font-size: 14px;
    text-align: center;
    min-width: 220px;
    backdrop-filter: blur(10px);
}

/* Adiciona espa√ßamento inferior para o chat input */
.stChatInput {
    margin-bottom: 100px !important;
}

/* Melhora o espa√ßamento do container principal */
.main .block-container {
    padding-bottom: 120px !important;
}
</style>
"""
st.markdown(css, unsafe_allow_html=True)

# =================================================================================
# ARQUITETURA DE INICIALIZA√á√ÉO DEFINITIVA - SISTEMA ROBUSTO E √Ä PROVA DE FALHAS
# =================================================================================

@st.cache_resource(show_spinner='Inicializando o c√©rebro do AFI... Este processo pode levar um momento.')
def inicializar_sistema(pasta_memoria="memoria"):
    """
    Fun√ß√£o de inicializa√ß√£o definitiva do sistema AFI.
    Carrega TODA a l√≥gica pesada de forma robusta e confi√°vel.
    Retorna o query_engine pronto para uso.
    """
    import traceback
    
    try:
        print("DEBUG: Inicializando sistema AFI com arquitetura robusta...")
        
        # Configurar Settings do LlamaIndex
        print("DEBUG: Configurando Settings do LlamaIndex...")
        Settings.embed_model = HuggingFaceEmbedding(model_name="BAAI/bge-small-en-v1.5")
        Settings.llm = Ollama(model="llama3.2", request_timeout=120.0)
        
        # Processar arquivos de m√≠dia
        print("DEBUG: Processando arquivos de m√≠dia...")
        carregar_memoria(pasta_memoria)
        
        # Verificar se a pasta existe
        if not os.path.exists(pasta_memoria):
            print(f"DEBUG: Pasta n√£o encontrada: {pasta_memoria}")
            return None
            
        print(f"DEBUG: Pasta encontrada: {pasta_memoria}")
        
        # Filtrar arquivos v√°lidos (excluindo v√≠deos)
        import glob
        arquivos_validos = []
        extensoes_video = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv']
        
        for arquivo in glob.glob(os.path.join(pasta_memoria, "*")):
            if os.path.isfile(arquivo):
                extensao = os.path.splitext(arquivo)[1].lower()
                if extensao in extensoes_video:
                    print(f"DEBUG: Pulando arquivo de v√≠deo: {os.path.basename(arquivo)}")
                    continue
                arquivos_validos.append(arquivo)
        
        print(f"DEBUG: {len(arquivos_validos)} arquivos v√°lidos encontrados")
        
        if not arquivos_validos:
            print("DEBUG: Nenhum arquivo v√°lido encontrado")
            return None
        
        # Criar SimpleDirectoryReader com arquivos v√°lidos
        print("DEBUG: Criando SimpleDirectoryReader...")
        documents = SimpleDirectoryReader(input_files=arquivos_validos).load_data()
        
        if not documents:
            print(f"DEBUG: Nenhum documento carregado da pasta: {pasta_memoria}")
            return None
            
        print(f"DEBUG: {len(documents)} documentos carregados com sucesso!")
        
        # Criar VectorStoreIndex
        print("DEBUG: Criando VectorStoreIndex...")
        index = VectorStoreIndex.from_documents(documents)
        
        # Criar query_engine
        print("DEBUG: Criando query_engine...")
        query_engine = index.as_query_engine()
        
        print("DEBUG: Sistema AFI inicializado com sucesso!")
        return query_engine
        
    except Exception as e:
        print("=" * 60)
        print("--- ERRO CR√çTICO NA INICIALIZA√á√ÉO DO SISTEMA ---")
        print(f"Tipo do erro: {type(e).__name__}")
        print(f"Mensagem: {str(e)}")
        print("Traceback completo:")
        traceback.print_exc()
        print("=" * 60)
        return None

# Carrega ou obt√©m do cache o motor RAG. A aplica√ß√£o s√≥ continua depois que esta linha for conclu√≠da.
query_engine = inicializar_sistema()

# =================================================================================
# SEQU√äNCIA DE INICIALIZA√á√ÉO ROBUSTA - SISTEMA SEMPRE PRONTO
# =================================================================================

if not st.session_state.system_ready:
    # TELA DE CARREGAMENTO
    st.title("üèóÔ∏è AFI v3.0 - Assistente Finiti Inteligente")
    st.markdown("### üß† Inicializando o c√©rebro do AFI...")
    
    with st.spinner("Conectando mem√≥rias e IAs... Por favor, aguarde."):
        try:
            # Configurar sistema de IA
            sistema_ok = setup_sistema_ia()
            
            if sistema_ok:
                # Sinaliza que o sistema est√° pronto
                st.session_state.system_ready = True
                
                # For√ßa o recarregamento do script
                st.rerun()
            else:
                st.error("‚ùå Erro na inicializa√ß√£o do sistema de IA")
                st.stop()
                
        except Exception as e:
            st.error(f"‚ùå Erro durante inicializa√ß√£o: {str(e)}")
            st.stop()

else:
    # =================================================================================
    # APLICA√á√ÉO PRINCIPAL - SISTEMA PRONTO
    # =================================================================================
    
    # Inicializar estado de navega√ß√£o (PADR√ÉO: CHAT)
    if 'view' not in st.session_state:
        st.session_state.view = 'chat'

    # Inicializar session states
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Sidebar com menu de navega√ß√£o
    with st.sidebar:
        st.title("üèóÔ∏è AFI v3.0")
        st.markdown("**Assistente Finiti Inteligente**")
        
        # Menu de navega√ß√£o
        st.session_state.view = option_menu(
            menu_title=None,
            options=["Chat", "Painel", "Conhecimento", "Est√∫dio"],
            icons=["chat-dots", "speedometer2", "book", "camera-video-fill"],
            menu_icon="cast",
            default_index=0,
            key="main_menu"
        )

    # =================================================================================
    # RENDERIZA√á√ÉO CONDICIONAL POR ESTADO
    # =================================================================================

    # TELA DE CHAT (PADR√ÉO)
    if st.session_state.view == 'Chat':
        # Exibir mensagens do chat
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Input do chat
        if prompt := st.chat_input("Fa√ßa uma pergunta ao AFI v4.0..."):
            
            # Adiciona a mensagem do usu√°rio ao hist√≥rico e √† tela
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # L√≥gica para obter e exibir a resposta da IA
            with st.chat_message("assistant", avatar="üèóÔ∏è"):
                with st.spinner("Pensando..."):
                    # üß† NOVA L√ìGICA: Usar ChatEngine com mem√≥ria conversacional quando dispon√≠vel
                    if st.session_state.chat_engine:
                        try:
                            # Usar ChatEngine que mant√©m contexto da conversa
                            resposta = st.session_state.chat_engine.chat(prompt)
                            resposta_texto = str(resposta)
                        except Exception as e:
                            # Fallback para o sistema antigo se ChatEngine falhar
                            resposta_texto = processar_prompt_geral(prompt, query_engine)
                            st.warning("‚ö†Ô∏è Usando modo compatibilidade (sem mem√≥ria conversacional)")
                    else:
                        # Fallback para o sistema antigo
                        resposta_texto = processar_prompt_geral(prompt, query_engine)
                    
                    st.markdown(resposta_texto)
            
            # Adiciona a resposta da IA ao hist√≥rico
            st.session_state.messages.append({"role": "assistant", "content": resposta_texto})

    # TELA DE PAINEL
    elif st.session_state.view == 'Painel':
        st.title("üìä Painel do Sistema")
        
        # Layout do dashboard
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("üìà Estat√≠sticas")
            # M√©tricas
            total_messages = len(st.session_state.messages)
            user_messages = len([m for m in st.session_state.messages if m["role"] == "user"])
            
            metric_col1, metric_col2 = st.columns(2)
            with metric_col1:
                st.metric("Mensagens Trocadas", total_messages)
            with metric_col2:
                st.metric("Perguntas do Usu√°rio", user_messages)
            
            # Bot√£o de limpeza
            if st.button("üóëÔ∏è Limpar Conversa", use_container_width=True):
                st.session_state.messages = []
                st.rerun()
        
        with col2:
            st.subheader("‚öôÔ∏è Status do Sistema")
            status = verificar_status_sistema()
            
            st.code("Interface: Conectada ‚úÖ")
            st.code(f"Ollama: {'Conectado ‚úÖ' if status['ollama'] else 'Desconectado ‚ùå'}")
            
            # Status do RAG usando a nova vari√°vel global
            if query_engine:
                st.success("RAG: Ativo ‚úÖ")
            else:
                st.error("RAG: Inativo ‚ùå")
                
            st.code(f"Modelos Dispon√≠veis: {status['models_count']}")

    # TELA DE GERENCIAMENTO DE CONHECIMENTO
    elif st.session_state.view == 'Conhecimento':
        st.title("üìö Gerenciamento de Conhecimento")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.subheader("üîó Indexar Pasta por Refer√™ncia")
            st.markdown("**üÜï Nova Funcionalidade:** Indexe uma pasta sem copiar os arquivos!")
            st.info("üí° Os arquivos permanecem em seus locais originais. Apenas as 'tradu√ß√µes' (embeddings) s√£o armazenadas.")
            
            pasta_servidor = st.text_input(
                "",
                placeholder="\\\\SERVIDOR\\Documentos\\Manuais",
                label_visibility="collapsed"
            )
            
            if st.button("üîó Indexar por Refer√™ncia", use_container_width=True):
                if pasta_servidor and os.path.isdir(pasta_servidor):
                    try:
                        with st.spinner("üîó Indexando arquivos por refer√™ncia... Aguarde."):
                            # üîó USAR NOVA FUN√á√ÉO DE INDEXA√á√ÉO POR REFER√äNCIA
                            query_engine, chat_engine = indexar_por_referencia(pasta_servidor)
                            
                            if query_engine and chat_engine:
                                # Atualizar apenas o chat_engine (query_engine √© gerenciado pelo cache)
                                st.session_state.chat_engine = chat_engine
                                
                                st.success(f"‚úÖ Pasta indexada por refer√™ncia com sucesso!")
                                st.info(f"üìÇ **Fonte:** {pasta_servidor}")
                                st.info("üß† **Mem√≥ria conversacional ativa!**")
                                st.warning("‚ö†Ô∏è Para usar a nova base, reinicie a aplica√ß√£o para limpar o cache.")
                                
                                # Mostrar estat√≠sticas
                                st.balloons()
                            else:
                                st.warning(f"‚ö†Ô∏è Pasta processada, mas nenhum documento v√°lido encontrado!")
                    except Exception as e:
                        st.error(f"‚ùå Erro ao indexar por refer√™ncia: {str(e)}")
                elif pasta_servidor:
                    st.error("‚ùå Caminho inv√°lido ou diret√≥rio n√£o encontrado!")
                else:
                    st.warning("‚ö†Ô∏è Por favor, insira um caminho v√°lido!")
            
            # Separador visual
            st.markdown("---")
            
            # Se√ß√£o de indexa√ß√£o tradicional (mantida para compatibilidade)
            st.subheader("üìÅ Indexa√ß√£o Tradicional")
            st.markdown("**(Modo Legado)** Indexar pasta local:")
            
            pasta_local = st.text_input(
                "",
                placeholder="C:\\caminho\\para\\pasta\\local",
                label_visibility="collapsed",
                key="pasta_local"
            )
        
            if st.button("üìÅ Indexar Pasta Local", use_container_width=True):
                if pasta_local and os.path.isdir(pasta_local):
                    try:
                        # Usar fun√ß√£o tradicional
                        query_engine_local, chat_engine = inicializar_rag(pasta_local)
                        if query_engine_local and chat_engine:
                            st.session_state.chat_engine = chat_engine
                            st.success(f"‚úÖ Pasta local indexada com sucesso!")
                            st.info(f"üìÇ Pasta: {pasta_local}")
                            st.warning("‚ö†Ô∏è Para usar a nova base, reinicie a aplica√ß√£o para limpar o cache.")
                        else:
                            st.warning(f"‚ö†Ô∏è Pasta indexada, mas nenhum documento encontrado!")
                    except Exception as e:
                        st.error(f"‚ùå Erro ao indexar: {str(e)}")
                elif pasta_local:
                    st.error("‚ùå Caminho inv√°lido ou diret√≥rio n√£o encontrado!")
                else:
                    st.warning("‚ö†Ô∏è Por favor, insira um caminho v√°lido!")
         
        with col2:
             st.subheader("üìä Status da Base de Conhecimento")
             
             # Status dos engines
             if st.session_state.chat_engine:
                 st.success("üß† **ChatEngine:** Ativo (com mem√≥ria conversacional)")
             elif query_engine:
                 st.warning("üîç **QueryEngine:** Ativo (sem mem√≥ria conversacional)")
             else:
                 st.error("‚ùå **Nenhum engine ativo**")
             
             # üîç NOVA SE√á√ÉO: File System Watcher
             st.markdown("---")
             st.subheader("üëÅÔ∏è File System Watcher")
             
             if WATCHER_AVAILABLE:
                 # Inicializar o watcher service se ainda n√£o foi feito
                 if not st.session_state.watcher_initialized:
                     try:
                         inicializar_watcher_service()
                         st.session_state.watcher_initialized = True
                         st.toast("‚úÖ File System Watcher inicializado!", icon="üëÅÔ∏è")
                     except Exception as e:
                         st.error(f"‚ùå Erro ao inicializar watcher: {str(e)}")
                 
                 # Status do watcher
                 if afi_watcher_service.is_running:
                     st.success("üëÅÔ∏è **Watcher:** Ativo (monitorando)")
                     
                     # Mostrar pastas monitoradas
                     pastas_monitoradas = afi_watcher_service.get_watched_folders()
                     if pastas_monitoradas:
                         st.write("üìÅ **Pastas monitoradas:**")
                         for pasta in pastas_monitoradas:
                             st.code(f"üìÇ {pasta}")
                     else:
                         st.info("üìÅ Nenhuma pasta sendo monitorada")
                     
                     # Controles do watcher
                     col_watcher1, col_watcher2 = st.columns(2)
                     
                     with col_watcher1:
                         if st.button("‚è∏Ô∏è Parar Watcher", use_container_width=True):
                             afi_watcher_service.stop()
                             st.success("‚è∏Ô∏è Watcher parado!")
                             st.rerun()
                     
                     with col_watcher2:
                         if st.button("üîÑ Reiniciar Watcher", use_container_width=True):
                             afi_watcher_service.stop()
                             afi_watcher_service.start()
                             st.success("üîÑ Watcher reiniciado!")
                             st.rerun()
                     
                     # Adicionar pasta para monitoramento
                     st.markdown("**Adicionar pasta para monitoramento:**")
                     nova_pasta = st.text_input(
                         "",
                         placeholder="\\\\SERVIDOR\\Documentos\\Manuais",
                         label_visibility="collapsed",
                         key="nova_pasta_watcher"
                     )
                     
                     if st.button("‚ûï Adicionar Pasta", use_container_width=True):
                         if nova_pasta and os.path.isdir(nova_pasta):
                             try:
                                 afi_watcher_service.add_folder(nova_pasta)
                                 st.success(f"‚úÖ Pasta adicionada ao monitoramento!")
                                 st.info(f"üìÇ {nova_pasta}")
                                 st.rerun()
                             except Exception as e:
                                 st.error(f"‚ùå Erro ao adicionar pasta: {str(e)}")
                         elif nova_pasta:
                             st.error("‚ùå Caminho inv√°lido ou diret√≥rio n√£o encontrado!")
                         else:
                             st.warning("‚ö†Ô∏è Por favor, insira um caminho v√°lido!")
                 
                 else:
                     st.warning("üëÅÔ∏è **Watcher:** Inativo")
                     
                     if st.button("‚ñ∂Ô∏è Iniciar Watcher", use_container_width=True):
                         try:
                             afi_watcher_service.start()
                             st.success("‚ñ∂Ô∏è Watcher iniciado!")
                             st.rerun()
                         except Exception as e:
                             st.error(f"‚ùå Erro ao iniciar watcher: {str(e)}")
             else:
                 st.error("‚ùå **Watchdog n√£o dispon√≠vel**")
                 st.info("üí° Instale com: `pip install watchdog`")
             
             # Informa√ß√µes da pasta atual
             st.markdown("---")
             st.subheader("üìã Pasta de Mem√≥ria Local")
             if os.path.exists("memoria"):
                 arquivos = os.listdir("memoria")
                 if arquivos:
                     st.write(f"üìÅ **Pasta de mem√≥ria ativa:** `memoria/`")
                     st.write(f"üìÑ **Arquivos encontrados:** {len(arquivos)}")
                     
                     # Mostrar alguns arquivos
                     for arquivo in arquivos[:5]:
                         st.code(f"üìÑ {arquivo}")
                     
                     if len(arquivos) > 5:
                         st.code(f"... e mais {len(arquivos) - 5} arquivos")
                 else:
                     st.info("üìÅ Pasta de mem√≥ria vazia")
             else:
                 st.warning("üìÅ Pasta de mem√≥ria n√£o encontrada")
             
             # Bot√£o para limpar mem√≥ria
             st.markdown("---")
             if st.button("üóëÔ∏è Limpar Base de Conhecimento", use_container_width=True):
                 # Limpar apenas o chat_engine (query_engine √© gerenciado pelo cache)
                 st.session_state.chat_engine = None
                 st.success("‚úÖ Base de conhecimento limpa!")
                 st.info("üí° Para limpar completamente, reinicie a aplica√ß√£o.")
                 st.rerun()

    # TELA DO EST√öDIO DE IA
    elif st.session_state.view == 'Est√∫dio':
        st.title("ü§ñ Est√∫dio de IA AFI")
        st.markdown("### *Diretor de Arte Rob√¥ - Upload e Relaxe*")
        
        # Importar fun√ß√£o de edi√ß√£o
        try:
            from editor_video import editar_video_story, criar_pastas_necessarias
            editor_disponivel = True
        except ImportError:
            editor_disponivel = False
            st.error("‚ùå Editor de v√≠deo n√£o dispon√≠vel. Verifique se o editor_video.py est√° presente.")
        
        if editor_disponivel:
            # Criar pastas necess√°rias
            criar_pastas_necessarias()
            
            # Criar duas colunas
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üìπ Upload do V√≠deo")
                
                # Upload de arquivo
                video_upload = st.file_uploader("Fa√ßa o upload de um v√≠deo", type=["mp4", "mov", "avi"])
                
                # Salvar v√≠deo temporariamente se foi feito upload
                video_path = None
                if video_upload is not None:
                    # Criar pasta tempor√°ria se n√£o existir
                    temp_dir = Path("temp_uploads")
                    temp_dir.mkdir(exist_ok=True)
                    
                    # Salvar arquivo temporariamente
                    video_path = temp_dir / video_upload.name
                    with open(video_path, "wb") as f:
                        f.write(video_upload.getbuffer())
                    
                    st.success(f"‚úÖ V√≠deo carregado: {video_upload.name}")
                    
                    # Mostrar informa√ß√µes do v√≠deo
                    try:
                        from editor_video import obter_info_video
                        info = obter_info_video(str(video_path))
                        if info:
                            st.info(f"üìä Dura√ß√£o: {info['duracao']:.1f}s | Tamanho: {info['tamanho'][0]}x{info['tamanho'][1]}")
                    except:
                        pass
                
                st.markdown("---")
                st.subheader("ü§ñ Dire√ß√£o Criativa Autom√°tica")
                st.markdown("**A IA vai:**")
                st.markdown("‚Ä¢ üéØ Analisar o conte√∫do do v√≠deo")
                st.markdown("‚Ä¢ ‚úçÔ∏è Criar frase de marketing impactante")
                st.markdown("‚Ä¢ üéµ Escolher m√∫sica perfeita")
                st.markdown("‚Ä¢ üì± Formatar para Stories (9:16)")
                st.markdown("‚Ä¢ üé® Posicionar texto profissionalmente")
                
                st.markdown("---")
                
                # Bot√£o de a√ß√£o principal
                gerar_video_btn = st.button("ü§ñ Gerar V√≠deo com IA", 
                                           disabled=not video_path,
                                           help="A IA far√° toda a dire√ß√£o criativa automaticamente!")
                
                # ü§ñ PROCESSAMENTO COM DIRETOR DE ARTE ROB√î
                if gerar_video_btn and video_path:
                    with st.spinner("ü§ñ Diretor de Arte Rob√¥ trabalhando... A IA est√° analisando, criando e editando!"):
                        try:
                            # Importar a fun√ß√£o do Diretor de Arte Rob√¥
                            from core_logic import criar_video_propaganda_ia
                            
                            # Chamar o Diretor de Arte Rob√¥
                            resultado = criar_video_propaganda_ia(str(video_path))
                            
                            # Verificar se foi bem-sucedido
                            if resultado and not resultado.startswith("‚ùå") and not resultado.startswith("Erro"):
                                st.session_state.video_processado = resultado
                                st.success("üéâ Diretor de Arte Rob√¥ conclu√≠do! V√≠deo criado com IA!")
                                st.balloons()  # Celebra√ß√£o!
                                st.rerun()
                            else:
                                st.error(f"‚ùå {resultado}")
                                
                        except Exception as e:
                            st.error(f"‚ùå Erro no Diretor de Arte Rob√¥: {str(e)}")
                            st.info("üí° Verifique se todas as depend√™ncias est√£o instaladas (moviepy, whisper, etc.)")
            
            with col2:
                st.subheader("Resultado")
                
                # Container para o v√≠deo
                video_result_container = st.container()
                
                with video_result_container:
                    # Verificar se h√° v√≠deo processado
                    if hasattr(st.session_state, 'video_processado') and st.session_state.video_processado:
                        video_path = st.session_state.video_processado
                        
                        if os.path.exists(video_path):
                            st.success("üéâ V√≠deo editado pronto!")
                            
                            # Mostrar v√≠deo
                            with open(video_path, 'rb') as video_file:
                                video_bytes = video_file.read()
                                st.video(video_bytes)
                            
                            # Bot√£o de download
                            st.download_button(
                                label="üì• Download do V√≠deo",
                                data=video_bytes,
                                file_name=os.path.basename(video_path),
                                mime="video/mp4"
                            )
                            
                            # Informa√ß√µes do arquivo
                            file_size = os.path.getsize(video_path) / (1024 * 1024)  # MB
                            st.info(f"üìÅ Arquivo: {os.path.basename(video_path)} ({file_size:.1f} MB)")
                            
                            # Bot√£o para limpar resultado
                            if st.button("üóëÔ∏è Novo V√≠deo"):
                                if hasattr(st.session_state, 'video_processado'):
                                    del st.session_state.video_processado
                                st.rerun()
                        else:
                            st.error("‚ùå Arquivo de v√≠deo n√£o encontrado.")
                    else:
                        st.info("üìπ Seu v√≠deo editado aparecer√° aqui ap√≥s o processamento.")
                        st.markdown("---")
                        st.markdown("**üí° Como usar:**")
                        st.markdown("1. Fa√ßa upload de um v√≠deo")
                        st.markdown("2. Digite o texto para o overlay")
                        st.markdown("3. Escolha uma m√∫sica")
                        st.markdown("4. Clique em 'Gerar V√≠deo Agora'")
        else:
            st.error("‚ùå Sistema de edi√ß√£o n√£o dispon√≠vel.")

# Fixed bottom-center div element
st.markdown(
    f'<div class="fixed-bottom-center">üèóÔ∏è AFI v3.0 - Sistema Robusto Ativo | Porta: {get_server_port()}</div>',
    unsafe_allow_html=True
)

# Informa√ß√µes do sistema no sidebar
with st.sidebar:
    st.markdown("---")
    st.markdown("### ‚öôÔ∏è Configura√ß√£o do Sistema")
    st.info(f"üåê **Porta Padr√£o:** {get_server_port()}")
    st.info(f"üîó **URL:** {get_server_url()}")
    st.markdown("---")
    st.markdown("**üìù Nota:** Este sistema usa sempre a porta 8507 para evitar confus√£o.")


def indexar_por_referencia(caminho_diretorio):
    """
    üîó NOVA FUNCIONALIDADE: Indexa√ß√£o por refer√™ncia
    Indexa arquivos diretamente de seus locais originais sem copi√°-los
    """
    import traceback
    
    try:
        print(f"DEBUG: Iniciando indexa√ß√£o por refer√™ncia de: {caminho_diretorio}")
        
        # Verificar se o diret√≥rio existe
        if not os.path.exists(caminho_diretorio):
            print(f"DEBUG: Diret√≥rio n√£o encontrado: {caminho_diretorio}")
            return None, None
            
        print(f"DEBUG: Diret√≥rio encontrado: {caminho_diretorio}")
        
        # Buscar todos os arquivos v√°lidos recursivamente
        import glob
        arquivos_validos = []
        extensoes_video = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv']
        extensoes_validas = ['.txt', '.pdf', '.docx', '.doc', '.md', '.rtf', '.odt']
        
        # Buscar recursivamente em todas as subpastas
        for extensao in extensoes_validas:
            pattern = os.path.join(caminho_diretorio, "**", f"*{extensao}")
            arquivos_encontrados = glob.glob(pattern, recursive=True)
            arquivos_validos.extend(arquivos_encontrados)
        
        # Filtrar arquivos de v√≠deo
        arquivos_finais = []
        for arquivo in arquivos_validos:
            if os.path.isfile(arquivo):
                extensao = os.path.splitext(arquivo)[1].lower()
                if extensao not in extensoes_video:
                    arquivos_finais.append(arquivo)
                else:
                    print(f"DEBUG: Pulando arquivo de v√≠deo: {os.path.basename(arquivo)}")
        
        print(f"DEBUG: {len(arquivos_finais)} arquivos v√°lidos encontrados para indexa√ß√£o")
        
        if not arquivos_finais:
            print("DEBUG: Nenhum arquivo v√°lido encontrado para indexa√ß√£o")
            return None, None
        
        # Mostrar alguns arquivos que ser√£o indexados
        print("DEBUG: Primeiros arquivos a serem indexados:")
        for i, arquivo in enumerate(arquivos_finais[:5]):
            print(f"  {i+1}. {os.path.basename(arquivo)}")
        if len(arquivos_finais) > 5:
            print(f"  ... e mais {len(arquivos_finais) - 5} arquivos")
        
        # üîó INDEXA√á√ÉO POR REFER√äNCIA: Carregar documentos diretamente dos arquivos originais
        print("DEBUG: Carregando documentos por refer√™ncia...")
        documents = SimpleDirectoryReader(input_files=arquivos_finais).load_data()
        
        if not documents:
            print(f"DEBUG: Nenhum documento carregado do diret√≥rio: {caminho_diretorio}")
            return None, None
            
        print(f"DEBUG: {len(documents)} documentos carregados com sucesso por refer√™ncia!")
        
        # Criar √≠ndice
        print("DEBUG: Criando √≠ndice vetorial...")
        index = VectorStoreIndex.from_documents(documents)
        
        # Criar query engine
        print("DEBUG: Criando query engine...")
        query_engine = index.as_query_engine()
        
        # üß† Criar ChatEngine com mem√≥ria conversacional
        print("DEBUG: Criando ChatEngine com mem√≥ria conversacional...")
        memory = ChatMemoryBuffer.from_defaults(token_limit=3000)
        chat_engine = index.as_chat_engine(
            chat_mode="context",
            memory=memory,
            system_prompt=(
                f"Voc√™ √© o AFI (Assistente Finiti Inteligente), um assistente especializado em engenharia, "
                f"constru√ß√£o e equipamentos da empresa Finiti. Voc√™ tem acesso √† base de conhecimento da empresa "
                f"localizada em '{caminho_diretorio}' e pode manter conversas contextuais. "
                f"Sempre se lembre do contexto anterior da conversa. "
                f"Quando o usu√°rio se referir a 'isso', 'aquilo', ou usar pronomes, considere o contexto da conversa anterior."
            )
        )
        
        print("DEBUG: Indexa√ß√£o por refer√™ncia conclu√≠da com sucesso!")
        return query_engine, chat_engine
        
    except Exception as e:
        # DIAGN√ìSTICO DETALHADO
        print("=" * 60)
        print("--- ERRO DETALHADO NA INDEXA√á√ÉO POR REFER√äNCIA ---")
        print(f"Tipo do erro: {type(e).__name__}")
        print(f"Mensagem: {str(e)}")
        print("Traceback completo:")
        traceback.print_exc()
        print("=" * 60)
        return None, None